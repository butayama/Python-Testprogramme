Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
>>> Zahlenraten.py
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    Zahlenraten.py
NameError: name 'Zahlenraten' is not defined
>>> 
 RESTART: C:/Users/uwe/AppData/Local/Programs/Python/Python36/Testprogramme/Zahlenraten.py 
Rate Zahl: 1
Zu klein
Rate Zahl: 5000
Zu groß
Rate Zahl: 1200
Zu klein
Rate Zahl: 1300
Zu klein
Rate Zahl: 1350
Zu groß
Rate Zahl: 1340
Zu groß
Rate Zahl: 1315
Zu klein
Rate Zahl: 1320
Zu klein
Rate Zahl: 1325
Zu klein
Rate Zahl: 1330
Zu klein
Rate Zahl: 1331
Zu klein
Rate Zahl: 1335
Zu klein
Rate Zahl: 1337
in  13 Versuchen
>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help()

Welcome to Python 3.6's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> modules

Please wait a moment while I gather a list of all available modules...

Zahlenraten         audioop             hyperparser         runscript
__future__          autocomplete        idle                sched
__main__            autocomplete_w      idle_test           scrolledlist
_ast                autoexpand          idlelib             search
_asyncio            base64              imaplib             searchbase
_bisect             bdb                 imghdr              searchengine
_blake2             binascii            imp                 secrets
_bootlocale         binhex              importlib           select
_bz2                bisect              inspect             selectors
_codecs             browser             io                  setuptools
_codecs_cn          builtins            iomenu              shelve
_codecs_hk          bz2                 ipaddress           shlex
_codecs_iso2022     cProfile            itertools           shutil
_codecs_jp          calendar            json                signal
_codecs_kr          calltip_w           keyword             site
_codecs_tw          calltips            lib2to3             smtpd
_collections        cgi                 linecache           smtplib
_collections_abc    cgitb               locale              sndhdr
_compat_pickle      chunk               logging             socket
_compression        cmath               lzma                socketserver
_csv                cmd                 macosx              sqlite3
_ctypes             code                macpath             sre_compile
_ctypes_test        codecontext         macurl2path         sre_constants
_datetime           codecs              mailbox             sre_parse
_decimal            codeop              mailcap             ssl
_dummy_thread       collections         mainmenu            stackviewer
_elementtree        colorizer           marshal             stat
_functools          colorsys            math                statistics
_hashlib            compileall          mimetypes           statusbar
_heapq              concurrent          mmap                string
_imp                config              modulefinder        stringprep
_io                 config_key          msilib              struct
_json               configdialog        msvcrt              subprocess
_locale             configparser        multicall           sunau
_lsprof             contextlib          multiprocessing     symbol
_lzma               copy                netrc               symtable
_markupbase         copyreg             nntplib             sys
_md5                crypt               nt                  sysconfig
_msi                csv                 ntpath              tabbedpages
_multibytecodec     ctypes              nturl2path          tabnanny
_multiprocessing    curses              numbers             tarfile
_opcode             datetime            opcode              telnetlib
_operator           dbm                 operator            tempfile
_osx_support        debugger            optparse            test
_overlapped         debugger_r          os                  textview
_pickle             debugobj            outwin              textwrap
_pydecimal          debugobj_r          paragraph           this
_pyio               decimal             parenmatch          threading
_random             delegator           parser              time
_sha1               difflib             pathbrowser         timeit
_sha256             dis                 pathlib             tkinter
_sha3               distutils           pdb                 token
_sha512             doctest             percolator          tokenize
_signal             dummy_threading     pickle              tooltip
_sitebuiltins       dynoption           pickletools         trace
_socket             easy_install        pip                 traceback
_sqlite3            editor              pipes               tracemalloc
_sre                email               pkg_resources       tree
_ssl                encodings           pkgutil             tty
_stat               ensurepip           platform            turtle
_string             enum                plistlib            turtledemo
_strptime           errno               poplib              types
_struct             faulthandler        posixpath           typing
_symtable           filecmp             pprint              undo
_testbuffer         fileinput           profile             unicodedata
_testcapi           filelist            pstats              unittest
_testconsole        fnmatch             pty                 urllib
_testimportmultiple formatter           py_compile          uu
_testmultiphase     fractions           pyclbr              uuid
_thread             ftplib              pydoc               venv
_threading_local    functools           pydoc_data          warnings
_tkinter            gc                  pyexpat             wave
_tracemalloc        genericpath         pyparse             weakref
_warnings           getopt              pyshell             webbrowser
_weakref            getpass             query               windows
_weakrefset         gettext             queue               winreg
_winapi             glob                quopri              winsound
abc                 grep                random              wsgiref
aifc                gzip                re                  xdrlib
antigravity         hashlib             redirector          xml
argparse            heapq               replace             xmlrpc
array               help                reprlib             xxsubtype
ast                 help_about          rlcompleter         zipapp
asynchat            history             rpc                 zipfile
asyncio             hmac                rstrip              zipimport
asyncore            html                run                 zlib
atexit              http                runpy               zoomheight

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".

help> symbols

Here is a list of the punctuation symbols which Python assigns special meaning
to. Enter any symbol to get more help.

!=                  *=                  <<                  ^
"                   +                   <<=                 ^=
"""                 +=                  <=                  _
%                   ,                   <>                  __
%=                  -                   ==                  `
&                   -=                  >                   b"
&=                  .                   >=                  b'
'                   ...                 >>                  j
'''                 /                   >>=                 r"
(                   //                  @                   r'
)                   //=                 J                   |
*                   /=                  [                   |=
**                  :                   \                   ~
**=                 <                   ]                   

help> keywords

Here is a list of the Python keywords.  Enter any keyword to get more help.

False               def                 if                  raise
None                del                 import              return
True                elif                in                  try
and                 else                is                  while
as                  except              lambda              with
assert              finally             nonlocal            yield
break               for                 not                 
class               from                or                  
continue            global              pass                

help> topics

Here is a list of available topics.  Enter any topic name to get more help.

ASSERTION           DELETION            LOOPING             SHIFTING
ASSIGNMENT          DICTIONARIES        MAPPINGMETHODS      SLICINGS
ATTRIBUTEMETHODS    DICTIONARYLITERALS  MAPPINGS            SPECIALATTRIBUTES
ATTRIBUTES          DYNAMICFEATURES     METHODS             SPECIALIDENTIFIERS
AUGMENTEDASSIGNMENT ELLIPSIS            MODULES             SPECIALMETHODS
BASICMETHODS        EXCEPTIONS          NAMESPACES          STRINGMETHODS
BINARY              EXECUTION           NONE                STRINGS
BITWISE             EXPRESSIONS         NUMBERMETHODS       SUBSCRIPTS
BOOLEAN             FLOAT               NUMBERS             TRACEBACKS
CALLABLEMETHODS     FORMATTING          OBJECTS             TRUTHVALUE
CALLS               FRAMEOBJECTS        OPERATORS           TUPLELITERALS
CLASSES             FRAMES              PACKAGES            TUPLES
CODEOBJECTS         FUNCTIONS           POWER               TYPEOBJECTS
COMPARISON          IDENTIFIERS         PRECEDENCE          TYPES
COMPLEX             IMPORTING           PRIVATENAMES        UNARY
CONDITIONAL         INTEGER             RETURNING           UNICODE
CONTEXTMANAGERS     LISTLITERALS        SCOPING             
CONVERSIONS         LISTS               SEQUENCEMETHODS     
DEBUGGING           LITERALS            SEQUENCES           

help> topic strings
No Python documentation found for 'topic strings'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> strings
No Python documentation found for 'strings'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> topic STRINGS
No Python documentation found for 'topic STRINGS'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> STRINGS
String and Bytes literals
*************************

String literals are described by the following lexical definitions:

   stringliteral   ::= [stringprefix](shortstring | longstring)
   stringprefix    ::= "r" | "u" | "R" | "U" | "f" | "F"
                    | "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | "Rf" | "RF"
   shortstring     ::= "'" shortstringitem* "'" | '"' shortstringitem* '"'
   longstring      ::= "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
   shortstringitem ::= shortstringchar | stringescapeseq
   longstringitem  ::= longstringchar | stringescapeseq
   shortstringchar ::= <any source character except "\" or newline or the quote>
   longstringchar  ::= <any source character except "\">
   stringescapeseq ::= "\" <any source character>

   bytesliteral   ::= bytesprefix(shortbytes | longbytes)
   bytesprefix    ::= "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB"
   shortbytes     ::= "'" shortbytesitem* "'" | '"' shortbytesitem* '"'
   longbytes      ::= "'''" longbytesitem* "'''" | '"""' longbytesitem* '"""'
   shortbytesitem ::= shortbyteschar | bytesescapeseq
   longbytesitem  ::= longbyteschar | bytesescapeseq
   shortbyteschar ::= <any ASCII character except "\" or newline or the quote>
   longbyteschar  ::= <any ASCII character except "\">
   bytesescapeseq ::= "\" <any ASCII character>

One syntactic restriction not indicated by these productions is that
whitespace is not allowed between the "stringprefix" or "bytesprefix"
and the rest of the literal. The source character set is defined by
the encoding declaration; it is UTF-8 if no encoding declaration is
given in the source file; see section Encoding declarations.

In plain English: Both types of literals can be enclosed in matching
single quotes ("'") or double quotes (""").  They can also be enclosed
in matching groups of three single or double quotes (these are
generally referred to as *triple-quoted strings*).  The backslash
("\") character is used to escape characters that otherwise have a
special meaning, such as newline, backslash itself, or the quote
character.

Bytes literals are always prefixed with "'b'" or "'B'"; they produce
an instance of the "bytes" type instead of the "str" type.  They may
only contain ASCII characters; bytes with a numeric value of 128 or
greater must be expressed with escapes.

As of Python 3.3 it is possible again to prefix string literals with a
"u" prefix to simplify maintenance of dual 2.x and 3.x codebases.

Both string and bytes literals may optionally be prefixed with a
letter "'r'" or "'R'"; such strings are called *raw strings* and treat
backslashes as literal characters.  As a result, in string literals,
"'\U'" and "'\u'" escapes in raw strings are not treated specially.
Given that Python 2.x's raw unicode literals behave differently than
Python 3.x's the "'ur'" syntax is not supported.

New in version 3.3: The "'rb'" prefix of raw bytes literals has been
added as a synonym of "'br'".

New in version 3.3: Support for the unicode legacy literal
("u'value'") was reintroduced to simplify the maintenance of dual
Python 2.x and 3.x codebases. See **PEP 414** for more information.

A string literal with "'f'" or "'F'" in its prefix is a *formatted
string literal*; see Formatted string literals.  The "'f'" may be
combined with "'r'", but not with "'b'" or "'u'", therefore raw
formatted strings are possible, but formatted bytes literals are not.

In triple-quoted literals, unescaped newlines and quotes are allowed
(and are retained), except that three unescaped quotes in a row
terminate the literal.  (A "quote" is the character used to open the
literal, i.e. either "'" or """.)

Unless an "'r'" or "'R'" prefix is present, escape sequences in string
and bytes literals are interpreted according to rules similar to those
used by Standard C.  The recognized escape sequences are:

+-------------------+-----------------------------------+---------+
| Escape Sequence   | Meaning                           | Notes   |
+===================+===================================+=========+
| "\newline"        | Backslash and newline ignored     |         |
+-------------------+-----------------------------------+---------+
| "\\"              | Backslash ("\")                   |         |
+-------------------+-----------------------------------+---------+
| "\'"              | Single quote ("'")                |         |
+-------------------+-----------------------------------+---------+
| "\""              | Double quote (""")                |         |
+-------------------+-----------------------------------+---------+
| "\a"              | ASCII Bell (BEL)                  |         |
+-------------------+-----------------------------------+---------+
| "\b"              | ASCII Backspace (BS)              |         |
+-------------------+-----------------------------------+---------+
| "\f"              | ASCII Formfeed (FF)               |         |
+-------------------+-----------------------------------+---------+
| "\n"              | ASCII Linefeed (LF)               |         |
+-------------------+-----------------------------------+---------+
| "\r"              | ASCII Carriage Return (CR)        |         |
+-------------------+-----------------------------------+---------+
| "\t"              | ASCII Horizontal Tab (TAB)        |         |
+-------------------+-----------------------------------+---------+
| "\v"              | ASCII Vertical Tab (VT)           |         |
+-------------------+-----------------------------------+---------+
| "\ooo"            | Character with octal value *ooo*  | (1,3)   |
+-------------------+-----------------------------------+---------+
| "\xhh"            | Character with hex value *hh*     | (2,3)   |
+-------------------+-----------------------------------+---------+

Escape sequences only recognized in string literals are:

+-------------------+-----------------------------------+---------+
| Escape Sequence   | Meaning                           | Notes   |
+===================+===================================+=========+
| "\N{name}"        | Character named *name* in the     | (4)     |
|                   | Unicode database                  |         |
+-------------------+-----------------------------------+---------+
| "\uxxxx"          | Character with 16-bit hex value   | (5)     |
|                   | *xxxx*                            |         |
+-------------------+-----------------------------------+---------+
| "\Uxxxxxxxx"      | Character with 32-bit hex value   | (6)     |
|                   | *xxxxxxxx*                        |         |
+-------------------+-----------------------------------+---------+

Notes:

1. As in Standard C, up to three octal digits are accepted.

2. Unlike in Standard C, exactly two hex digits are required.

3. In a bytes literal, hexadecimal and octal escapes denote the
   byte with the given value. In a string literal, these escapes
   denote a Unicode character with the given value.

4. Changed in version 3.3: Support for name aliases [1] has been
   added.

5. Exactly four hex digits are required.

6. Any Unicode character can be encoded this way.  Exactly eight
   hex digits are required.

Unlike Standard C, all unrecognized escape sequences are left in the
string unchanged, i.e., *the backslash is left in the result*.  (This
behavior is useful when debugging: if an escape sequence is mistyped,
the resulting output is more easily recognized as broken.)  It is also
important to note that the escape sequences only recognized in string
literals fall into the category of unrecognized escapes for bytes
literals.

   Changed in version 3.6: Unrecognized escape sequences produce a
   DeprecationWarning.  In some future version of Python they will be
   a SyntaxError.

Even in a raw literal, quotes can be escaped with a backslash, but the
backslash remains in the result; for example, "r"\""" is a valid
string literal consisting of two characters: a backslash and a double
quote; "r"\"" is not a valid string literal (even a raw string cannot
end in an odd number of backslashes).  Specifically, *a raw literal
cannot end in a single backslash* (since the backslash would escape
the following quote character).  Note also that a single backslash
followed by a newline is interpreted as those two characters as part
of the literal, *not* as a line continuation.

Related help topics: str, UNICODE, SEQUENCES, STRINGMETHODS, FORMATTING,TYPES

help> NUMBERS
Numeric literals
****************

There are three types of numeric literals: integers, floating point
numbers, and imaginary numbers.  There are no complex literals
(complex numbers can be formed by adding a real number and an
imaginary number).

Note that numeric literals do not include a sign; a phrase like "-1"
is actually an expression composed of the unary operator '"-"' and the
literal "1".

Related help topics: INTEGER, FLOAT, COMPLEX, TYPES

help> modules re

Here is a list of modules whose name or summary contains 're'.
If there are any, enter a module name to get more help.

_collections - High performance data structures.
_imp - (Extremely) low-level import machinery bits as used by importlib and imp.
_io - The io module provides the Python interfaces to stream handling. The
_sre 
_thread - This module provides primitive operations to write multi-threaded programs.
_weakref - Weak-reference support module.
array - This module defines an object type which can efficiently represent
gc - This module provides access to the garbage collector for reference cycles.
itertools - Functional tools for creating and using iterators.
marshal - This module contains functions that can read and write Python values in
winreg - This module provides access to the Windows registry API.
zlib - The functions in this module allow compression and decompression using the
debugger_r - Support for remote Python debugging.
dynoption - OptionMenu widget modified to allow dynamic menu reconfiguration
grep 
hyperparser - Provide advanced parsing abilities for ParenMatch and other extensions.
idle_test.mock_tk - Classes that replace tkinter gui objects used by an object being tested.
idle_test.test_grep - !Changing this line will break Test_findfile.test_found!
idle_test.test_parenmatch 
idle_test.test_redirector 
idle_test.test_replace - Unittest for idlelib.replace.py
idle_test.test_tree 
parenmatch - ParenMatch -- An IDLE extension for parenthesis matching.
query - Dialogs that query users and verify the answer before accepting.
redirector 
replace - Replace dialog for IDLE. Inherits SearchDialogBase for GUI.
tree 
_elementtree 
__future__ - Record of phased-in incompatible language changes.
_bootlocale - A minimal subset of the locale module used at interpreter startup
_compression - Internal classes used by the gzip, lzma and bz2 modules
_dummy_thread - Drop-in replacement for the thread module.
_markupbase - Shared support for scanning document type declarations in HTML and XHTML.
_osx_support - Shared OS X support functions.
_strptime - Strptime-related classes and functions.
_threading_local - Thread-local objects.
_weakrefset 
asynchat - A class supporting chat-style (command/response) protocols.
asyncio.base_futures 
asyncio.compat - Compatibility helpers for the different Python versions.
asyncio.futures - A Future class similar to the one in PEP 3148.
asyncio.proactor_events - Event loop using a proactor and related classes.
asyncio.selector_events - Event loop using a selector and related classes.
asyncio.streams - Stream-related things.
asyncio.test_utils - Utilities shared by tests.
asyncore - Basic infrastructure for asynchronous socket service clients and servers.
binhex - Macintosh binhex compression/decompression.
bz2 - Interface to the libbzip2 compression library.
cgitb - More comprehensive traceback formatting for Python scripts.
chunk - Simple class to read IFF chunks.
cmd - A generic class to build line-oriented command interpreters.
code - Utilities needed to emulate Python's interactive interpreter.
codecs - codecs -- Python Codec Registry, API and helpers.
concurrent 
concurrent.futures - Execute computations asynchronously using threads or processes.
concurrent.futures._base 
concurrent.futures.process - Implements ProcessPoolExecutor.
concurrent.futures.thread - Implements ThreadPoolExecutor.
copyreg - Helper to provide extensibility for pickle.
csv - csv.py - read/write/investigate CSV files
ctypes - create and manipulate C data types in Python
ctypes.test.test_bytes - Test where byte objects are accepted
ctypes.test.test_checkretval 
ctypes.test.test_functions - Here is probably the place to write the docs, since the test-cases
ctypes.test.test_keeprefs 
ctypes.test.test_refcounts 
ctypes.test.test_repr 
ctypes.test.test_returnfuncptrs 
ctypes.test.test_structures 
ctypes.test.test_unaligned_structures 
datetime - Concrete date/time and related types.
distutils.command.register - distutils.command.register
distutils.core - distutils.core
distutils.tests.test_core - Tests for distutils.core.
distutils.tests.test_register - Tests for distutils.command.register.
distutils.tests.test_versionpredicate - Tests harness for distutils.versionpredicate.
distutils.version - Provides classes to represent module version numbers (one class for
distutils.versionpredicate - Module for parsing and testing package version predicate strings.
dummy_threading - Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.
email._header_value_parser - Header value parser implementing various email-related RFC parsing rules.
email._parseaddr - Email address parsing code.
email.encoders - Encodings and related functions.
email.generator - Classes to generate plain text from a message object tree.
email.headerregistry - Representing and manipulating email headers via custom objects.
email.mime.application - Class representing application/* type MIME documents.
email.mime.audio - Class representing audio/* type MIME documents.
email.mime.image - Class representing image/* type MIME documents.
email.mime.message - Class representing message/* MIME documents.
email.mime.nonmultipart - Base class for MIME type messages that are not multipart.
email.mime.text - Class representing text/* type MIME documents.
encodings.bz2_codec - Python 'bz2_codec' Codec - bz2 compression encoding.
encodings.mac_greek - Python Character Mapping Codec mac_greek generated from 'MAPPINGS/VENDORS/APPLE/GREEK.TXT' with gencodec.py.
encodings.zlib_codec - Python 'zlib_codec' Codec - zlib compression encoding.
ensurepip 
ensurepip.__main__ 
ensurepip._uninstall - Basic pip uninstallation support, helper for the Windows uninstaller
filecmp - Utilities for comparing files and directories.
fractions - Fraction, infinite-precision, real numbers.
genericpath - Path operations common to more than one OS
getpass - Utilities to get a password and/or the current user name.
gzip - Functions that read and write gzipped files.
html.entities - HTML character entity references.
http.cookies - Here's a sample session to show how to use this module.
idlelib.debugger_r - Support for remote Python debugging.
idlelib.dynoption - OptionMenu widget modified to allow dynamic menu reconfiguration
idlelib.grep 
idlelib.hyperparser - Provide advanced parsing abilities for ParenMatch and other extensions.
idlelib.idle_test.mock_tk - Classes that replace tkinter gui objects used by an object being tested.
idlelib.idle_test.test_grep - !Changing this line will break Test_findfile.test_found!
idlelib.idle_test.test_parenmatch 
idlelib.idle_test.test_redirector 
idlelib.idle_test.test_replace - Unittest for idlelib.replace.py
idlelib.idle_test.test_tree 
idlelib.parenmatch - ParenMatch -- An IDLE extension for parenthesis matching.
idlelib.query - Dialogs that query users and verify the answer before accepting.
idlelib.redirector 
idlelib.replace - Replace dialog for IDLE. Inherits SearchDialogBase for GUI.
idlelib.tree 
imghdr - Recognize image file formats based on their first few bytes.
importlib - A pure Python implementation of import.
importlib._bootstrap - Core implementation of import.
importlib._bootstrap_external - Core implementation of path-based import.
importlib.abc - Abstract base classes related to import.
io - The io module provides the Python interfaces to stream handling. The
ipaddress - A fast, lightweight IPv4/IPv6 manipulation library in Python.
json.tool - Command-line tool to validate and pretty-print JSON
lib2to3.btm_matcher - A bottom-up tree matching algorithm implementation meant to speed
lib2to3.fixer_base - Base class for fixers (optional, but recommended).
lib2to3.fixes.fix_asserts - Fixer that replaces deprecated unittest method names.
lib2to3.fixes.fix_future - Remove __future__ imports
lib2to3.fixes.fix_imports - Fix incompatible imports and module references.
lib2to3.fixes.fix_imports2 - Fix incompatible imports and module references that must be fixed after
lib2to3.fixes.fix_long - Fixer that turns 'long' into 'int' everywhere.
lib2to3.fixes.fix_map - Fixer that changes map(F, ...) into list(map(F, ...)) unless there
lib2to3.fixes.fix_paren - Fixer that addes parentheses where they are required
lib2to3.fixes.fix_reduce - Fixer for reduce().
lib2to3.fixes.fix_reload - Fixer for reload().
lib2to3.fixes.fix_renames - Fix incompatible renames
lib2to3.fixes.fix_repr - Fixer that transforms `xyzzy` into repr(xyzzy).
lib2to3.fixes.fix_types - Fixer for removing uses of the types module.
lib2to3.fixes.fix_urllib - Fix changes imports of urllib which are now incompatible.
lib2to3.fixes.fix_xreadlines - Fix "for x in f.xreadlines()" -> "for x in f".
lib2to3.pgen2.grammar - This module defines the data structures used to represent a grammar.
lib2to3.pytree - Python parse tree definitions.
lib2to3.refactor - Refactoring framework.
lib2to3.tests.pytree_idempotency - Main program for testing the infrastructure.
lib2to3.tests.test_all_fixers - Tests that run all fixer modules over an input stream.
lib2to3.tests.test_pytree - Unit tests for pytree.py.
lib2to3.tests.test_refactor - Unit tests for refactor.py.
logging - Logging package for Python. Based on PEP 282 and comments thereto in
logging.config - Configuration functions for the logging package for Python. The core package
logging.handlers - Additional handlers for the logging package for Python. The core package is
lzma - Interface to the liblzma compression library.
macpath - Pathname and path-related operations for the Macintosh.
mailbox - Read/write support for Maildir, mbox, MH, Babyl, and MMDF mailboxes.
multiprocessing.reduction 
multiprocessing.resource_sharer 
multiprocessing.semaphore_tracker 
multiprocessing.sharedctypes 
opcode - opcode module - potentially shared between dis and other modules which
os - OS routines for NT or Posix depending on what system we're on.
pickle - Create portable serialized representations of Python objects.
platform - This module tries to retrieve as much platform-identifying data as
pprint - Support to pretty-print lists, tuples, & dictionaries recursively.
pstats - Class for printing reports on profiled python code.
re - Support for regular expressions (RE).
reprlib - Redo the builtin repr() (representation) but with limits on most sizes.
rlcompleter - Word completion for GNU readline.
secrets - Generate cryptographically strong pseudo-random numbers suitable for
shutil - Utility functions for copying and archiving files and directory trees.
sndhdr - Routines to help recognizing sound files.
socket - This module provides socket operations and some related functions.
sqlite3.test.regression 
sre_compile - Internal support module for sre
sre_constants - Internal support module for sre
sre_parse - Internal support module for sre
ssl - This module provides some more Pythonic support for SSL.
stat - Constants/functions for interpreting results of os.stat() and os.lstat().
stringprep - Library that exposes various tables found in the StringPrep RFC 3454.
subprocess - Subprocesses with accessible I/O streams
tarfile - Read from and write to tar format archives.
test.ann_module2 - Some correct syntax for variable annotation here.
test.ann_module3 - Correct syntax for variable annotation that should fail at runtime
test.badsyntax_future10 
test.badsyntax_future3 - This is a test
test.badsyntax_future4 - This is a test
test.badsyntax_future5 - This is a test
test.badsyntax_future6 - This is a test
test.badsyntax_future7 - This is a test
test.badsyntax_future8 - This is a test
test.badsyntax_future9 - This is a test
test.bytecode_helper - bytecode_helper - support tools for testing correct bytecode generation
test.future_test1 - This is a test
test.future_test2 - This is a test
test.libregrtest 
test.libregrtest.cmdline 
test.libregrtest.main 
test.libregrtest.refleak 
test.libregrtest.runtest 
test.libregrtest.runtest_mp 
test.libregrtest.save_env 
test.libregrtest.setup 
test.memory_watchdog - Memory watchdog: periodically read the memory usage of the main test process
test.re_tests 
test.regrtest - Script to run Python regression tests.
test.relimport 
test.reperf 
test.sample_doctest - This is a sample module that doesn't really test anything all that
test.string_tests - Common tests shared by test_unicode, test_userstring and test_bytes.
test.support - Supporting definitions for the Python regression tests.
test.test___future__ 
test.test__osx_support - Test suite for _osx_support: shared OS X support functions.
test.test_asyncio.test_futures - Tests for futures.py.
test.test_asyncio.test_streams - Tests for streams.py.
test.test_asyncore 
test.test_bigaddrspace - These tests are meant to exercise that requests to create objects bigger
test.test_code - This module includes tests of the code object representation.
test.test_compare 
test.test_concurrent_futures 
test.test_copyreg 
test.test_decimal - These are the test cases for the Decimal module.
test.test_doctest2 - A module to test whether doctest recognizes some 2.2 features,
test.test_dummy_thread 
test.test_dummy_threading 
test.test_email.test_headerregistry 
test.test_email.test_inversion - Test the parser and generator are inverses.
test.test_email.torture_test 
test.test_ensurepip 
test.test_fork1 - This test checks for correct fork() behavior.
test.test_future 
test.test_future3 
test.test_future4 
test.test_future5 
test.test_global - Verify that warnings are issued for global statements following use.
test.test_importlib.import_.test___package__ - PEP 366 ("Main module explicit relative imports") specifies the
test.test_importlib.import_.test_fromlist - Test that the semantics relating to the 'fromlist' argument are correct.
test.test_importlib.import_.test_relative_imports - Test relative imports (PEP 328).
test.test_int_literal - Test correct treatment of hex/oct constants.
test.test_ipaddress - Unittest for ipaddress module.
test.test_iterlen - Test Iterator Length Transparency
test.test_json.test_recursion 
test.test_largefile - Test largefile support on system where this makes sense.
test.test_ordered_dict 
test.test_osx_env - Test suite for OS X interpreter environment variables.
test.test_re 
test.test_readline - Very minimal unittests for parts of the readline module.
test.test_regrtest - Tests of regrtest.py.
test.test_reprlib - Test cases for the repr module
test.test_resource 
test.test_secrets - Test the secrets module.
test.test_string_literals - Test correct treatment of various string literals by the parser.
test.test_stringprep 
test.test_sundry - Do a minimal test of all the modules that aren't otherwise tested.
test.test_super - Unit tests for zero-argument super() & related machinery.
test.test_thread 
test.test_threaded_import 
test.test_threadedtempfile - Create and delete FILES_PER_THREAD temp files (via tempfile.TemporaryFile)
test.test_threading - Tests for the threading module.
test.test_threading_local 
test.test_threadsignals - PyUnit testing that threads honor our signal semantics
test.test_timeout - Unit tests for socket timeout feature.
test.test_tools - Support functions for testing scripts in the Tools directory.
test.test_tools.test_gprof2html - Tests for the gprof2html script in the Tools directory.
test.test_tools.test_md5sum - Tests for the md5sum script in the Tools directory.
test.test_tools.test_pdeps - Tests for the pdeps script in the Tools directory.
test.test_tools.test_pindent - Tests for the pindent script in the Tools directory.
test.test_tools.test_reindent - Tests for scripts in the Tools directory.
test.test_tools.test_sundry - Tests for scripts in the Tools directory.
test.test_tools.test_unparse - Tests for the unparse.py script in the Tools/parser directory.
test.test_urllib - Regression tests for what was in Python 2's "urllib" module
test.test_urllib_response - Unit tests for code in urllib.response.
test.test_wait3 - This test checks for correct wait3() behavior.
test.test_wait4 - This test checks for correct wait4() behavior.
test.test_weakref 
test.test_winreg 
test.test_wsgiref 
test.test_xml_etree 
test.test_xml_etree_c 
test.threaded_import_hangers 
threading - Thread module emulating a subset of Java's threading model.
turtledemo.forest - turtlegraphics-example-suite:
turtledemo.tree - turtle-example-suite:
types - Define names for built-in types that aren't directly accessible as a builtin.
unittest.result - Test result object
unittest.test._test_warnings - This module has a number of tests that raise different kinds of warnings.
unittest.test.test_break 
unittest.test.test_result 
urllib.parse - Parse (absolute and relative) URLs.
urllib.request - An extensible library for opening URLs using a variety of protocols
urllib.response - Response classes used by urllib.
weakref - Weak reference support for Python.
webbrowser - Interfaces for launching and remotely controlling Web browsers.
wsgiref - wsgiref -- a WSGI (PEP 3333) Reference Library
wsgiref.handlers - Base classes for server/gateway implementations
wsgiref.headers - Manage HTTP Response Headers
wsgiref.simple_server - BaseHTTPServer that implements the Python WSGI protocol (PEP 3333)
wsgiref.util - Miscellaneous WSGI-related Utilities
wsgiref.validate - Middleware to check for obedience to the WSGI specification.
xdrlib - Implements (a subset of) Sun XDR -- eXternal Data Representation.
xml - Core XML support for Python.
xml.dom.domreg - Registration facilities for DOM. This module should not be used
xml.dom.xmlbuilder - Implementation of the DOM Level 3 'LS-Load' feature.
xml.etree 
xml.etree.ElementInclude 
xml.etree.ElementPath 
xml.etree.ElementTree - Lightweight XML support for Python.
xml.etree.cElementTree 
xml.sax._exceptions - Different kinds of SAX Exceptions
xml.sax.expatreader - SAX driver for the pyexpat C module.  This driver works with
xml.sax.handler - This module contains the core classes of version 2.0 of SAX for Python.
xml.sax.xmlreader - An XML Reader is the SAX 2 name for an XML parser. XML Parsers
zipfile - Read and write ZIP files.
pip._vendor - pip._vendor is for vendoring dependencies of pip to prevent needing pip to
pip._vendor.cachecontrol.cache - The cache object API for implementing caches. The default is a thread
pip._vendor.cachecontrol.caches.redis_cache 
pip._vendor.cachecontrol.controller - The httplib2 algorithms ported for use with requests.
pip._vendor.distlib._backport.shutil - Utility functions for copying and archiving files and directory trees.
pip._vendor.distlib.manifest - Class representing the list of files in a distribution.
pip._vendor.distlib.resources 
pip._vendor.html5lib._inputstream 
pip._vendor.html5lib.treeadapters 
pip._vendor.html5lib.treeadapters.genshi 
pip._vendor.html5lib.treeadapters.sax 
pip._vendor.html5lib.treebuilders - A collection of modules for building different kinds of tree from
pip._vendor.html5lib.treebuilders.base 
pip._vendor.html5lib.treebuilders.dom 
pip._vendor.html5lib.treebuilders.etree 
pip._vendor.html5lib.treebuilders.etree_lxml - Module for supporting the lxml.etree library. The idea here is to use as much
pip._vendor.html5lib.treewalkers - A collection of modules for iterating through different kinds of
pip._vendor.html5lib.treewalkers.base 
pip._vendor.html5lib.treewalkers.dom 
pip._vendor.html5lib.treewalkers.etree 
pip._vendor.html5lib.treewalkers.etree_lxml 
pip._vendor.html5lib.treewalkers.genshi 
pip._vendor.ipaddress - A fast, lightweight IPv4/IPv6 manipulation library in Python.
pip._vendor.ordereddict 
pip._vendor.packaging._structures 
pip._vendor.packaging.requirements 
pip._vendor.pkg_resources - Package resource API
pip._vendor.progress 
pip._vendor.progress.bar 
pip._vendor.progress.counter 
pip._vendor.progress.helpers 
pip._vendor.progress.spinner 
pip._vendor.re-vendor 
pip._vendor.requests - Requests HTTP library
pip._vendor.requests.adapters - requests.adapters
pip._vendor.requests.api - requests.api
pip._vendor.requests.auth - requests.auth
pip._vendor.requests.certs - requests.certs
pip._vendor.requests.compat - requests.compat
pip._vendor.requests.cookies - requests.cookies
pip._vendor.requests.exceptions - requests.exceptions
pip._vendor.requests.hooks - requests.hooks
pip._vendor.requests.models - requests.models
pip._vendor.requests.packages 
pip._vendor.requests.packages.chardet 
pip._vendor.requests.packages.chardet.big5freq 
pip._vendor.requests.packages.chardet.big5prober 
pip._vendor.requests.packages.chardet.chardetect - Script which takes one or more file paths and reports on their detected
pip._vendor.requests.packages.chardet.chardistribution 
pip._vendor.requests.packages.chardet.charsetgroupprober 
pip._vendor.requests.packages.chardet.charsetprober 
pip._vendor.requests.packages.chardet.codingstatemachine 
pip._vendor.requests.packages.chardet.compat 
pip._vendor.requests.packages.chardet.constants 
pip._vendor.requests.packages.chardet.cp949prober 
pip._vendor.requests.packages.chardet.escprober 
pip._vendor.requests.packages.chardet.escsm 
pip._vendor.requests.packages.chardet.eucjpprober 
pip._vendor.requests.packages.chardet.euckrfreq 
pip._vendor.requests.packages.chardet.euckrprober 
pip._vendor.requests.packages.chardet.euctwfreq 
pip._vendor.requests.packages.chardet.euctwprober 
pip._vendor.requests.packages.chardet.gb2312freq 
pip._vendor.requests.packages.chardet.gb2312prober 
pip._vendor.requests.packages.chardet.hebrewprober 
pip._vendor.requests.packages.chardet.jisfreq 
pip._vendor.requests.packages.chardet.jpcntx 
pip._vendor.requests.packages.chardet.langbulgarianmodel 
pip._vendor.requests.packages.chardet.langcyrillicmodel 
pip._vendor.requests.packages.chardet.langgreekmodel 
pip._vendor.requests.packages.chardet.langhebrewmodel 
pip._vendor.requests.packages.chardet.langhungarianmodel 
pip._vendor.requests.packages.chardet.langthaimodel 
pip._vendor.requests.packages.chardet.latin1prober 
pip._vendor.requests.packages.chardet.mbcharsetprober 
pip._vendor.requests.packages.chardet.mbcsgroupprober 
pip._vendor.requests.packages.chardet.mbcssm 
pip._vendor.requests.packages.chardet.sbcharsetprober 
pip._vendor.requests.packages.chardet.sbcsgroupprober 
pip._vendor.requests.packages.chardet.sjisprober 
pip._vendor.requests.packages.chardet.universaldetector 
pip._vendor.requests.packages.chardet.utf8prober 
pip._vendor.requests.packages.urllib3 - urllib3 - Thread-safe connection pooling and re-using.
pip._vendor.requests.packages.urllib3._collections 
pip._vendor.requests.packages.urllib3.connection 
pip._vendor.requests.packages.urllib3.connectionpool 
pip._vendor.requests.packages.urllib3.contrib 
pip._vendor.requests.packages.urllib3.contrib.appengine 
pip._vendor.requests.packages.urllib3.contrib.ntlmpool - NTLM authenticating pool, contributed by erikcederstran
pip._vendor.requests.packages.urllib3.contrib.pyopenssl 
pip._vendor.requests.packages.urllib3.contrib.socks - SOCKS support for urllib3
pip._vendor.requests.packages.urllib3.exceptions 
pip._vendor.requests.packages.urllib3.fields 
pip._vendor.requests.packages.urllib3.filepost 
pip._vendor.requests.packages.urllib3.packages 
pip._vendor.requests.packages.urllib3.packages.ordered_dict 
pip._vendor.requests.packages.urllib3.packages.six - Utilities for writing code that runs on Python 2 and 3
pip._vendor.requests.packages.urllib3.packages.ssl_match_hostname 
pip._vendor.requests.packages.urllib3.packages.ssl_match_hostname._implementation - The match_hostname() function from Python 3.3.3, essential when using SSL.
pip._vendor.requests.packages.urllib3.poolmanager 
pip._vendor.requests.packages.urllib3.request 
pip._vendor.requests.packages.urllib3.response 
pip._vendor.requests.packages.urllib3.util 
pip._vendor.requests.packages.urllib3.util.connection 
pip._vendor.requests.packages.urllib3.util.request 
pip._vendor.requests.packages.urllib3.util.response 
pip._vendor.requests.packages.urllib3.util.retry 
pip._vendor.requests.packages.urllib3.util.ssl_ 
pip._vendor.requests.packages.urllib3.util.timeout 
pip._vendor.requests.packages.urllib3.util.url 
pip._vendor.requests.sessions - requests.session
pip._vendor.requests.status_codes 
pip._vendor.requests.structures - requests.structures
pip._vendor.requests.utils - requests.utils
pip._vendor.retrying 
pip.basecommand - Base Command class, and related routines
pip.cmdoptions - shared options and groups
pip.commands.freeze 
pip.compat - Stuff that differs in different Python versions and platform
pip.index - Routines related to PyPI, indexes
pip.locations - Locations where we look for configs, install stuff, etc
pip.operations.freeze 
pip.req 
pip.req.req_file - Requirements file parsing
pip.req.req_install 
pip.req.req_set 
pip.req.req_uninstall 
pip.utils.deprecation - A module that implements tooling to enable easy warnings about deprecations.
pkg_resources - Package resource API
pkg_resources._vendor 
pkg_resources._vendor.appdirs - Utilities for determining application-specific dirs.
pkg_resources._vendor.packaging 
pkg_resources._vendor.packaging.__about__ 
pkg_resources._vendor.packaging._compat 
pkg_resources._vendor.packaging._structures 
pkg_resources._vendor.packaging.markers 
pkg_resources._vendor.packaging.requirements 
pkg_resources._vendor.packaging.specifiers 
pkg_resources._vendor.packaging.utils 
pkg_resources._vendor.packaging.version 
pkg_resources._vendor.pyparsing 
pkg_resources._vendor.six - Utilities for writing code that runs on Python 2 and 3
pkg_resources.extern 
setuptools.command.register 
setuptools.package_index - PyPI and direct package downloading

help> re
Help on module re:

NAME
    re - Support for regular expressions (RE).

DESCRIPTION
    This module provides regular expression matching operations similar to
    those found in Perl.  It supports both 8-bit and Unicode strings; both
    the pattern and the strings being processed can contain null bytes and
    characters outside the US ASCII range.
    
    Regular expressions can contain both special and ordinary characters.
    Most ordinary characters, like "A", "a", or "0", are the simplest
    regular expressions; they simply match themselves.  You can
    concatenate ordinary characters, so last matches the string 'last'.
    
    The special characters are:
        "."      Matches any character except a newline.
        "^"      Matches the start of the string.
        "$"      Matches the end of the string or just before the newline at
                 the end of the string.
        "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
                 Greedy means that it will match as many repetitions as possible.
        "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
        "?"      Matches 0 or 1 (greedy) of the preceding RE.
        *?,+?,?? Non-greedy versions of the previous three special characters.
        {m,n}    Matches from m to n repetitions of the preceding RE.
        {m,n}?   Non-greedy version of the above.
        "\\"     Either escapes special characters or signals a special sequence.
        []       Indicates a set of characters.
                 A "^" as the first character indicates a complementing set.
        "|"      A|B, creates an RE that will match either A or B.
        (...)    Matches the RE inside the parentheses.
                 The contents can be retrieved or matched later in the string.
        (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
        (?:...)  Non-grouping version of regular parentheses.
        (?P<name>...) The substring matched by the group is accessible by name.
        (?P=name)     Matches the text matched earlier by the group named name.
        (?#...)  A comment; ignored.
        (?=...)  Matches if ... matches next, but doesn't consume the string.
        (?!...)  Matches if ... doesn't match next.
        (?<=...) Matches if preceded by ... (must be fixed length).
        (?<!...) Matches if not preceded by ... (must be fixed length).
        (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                           the (optional) no pattern otherwise.
    
    The special sequences consist of "\\" and a character from the list
    below.  If the ordinary character is not on the list, then the
    resulting RE will match the second character.
        \number  Matches the contents of the group of the same number.
        \A       Matches only at the start of the string.
        \Z       Matches only at the end of the string.
        \b       Matches the empty string, but only at the start or end of a word.
        \B       Matches the empty string, but not at the start or end of a word.
        \d       Matches any decimal digit; equivalent to the set [0-9] in
                 bytes patterns or string patterns with the ASCII flag.
                 In string patterns without the ASCII flag, it will match the whole
                 range of Unicode digits.
        \D       Matches any non-digit character; equivalent to [^\d].
        \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
                 bytes patterns or string patterns with the ASCII flag.
                 In string patterns without the ASCII flag, it will match the whole
                 range of Unicode whitespace characters.
        \S       Matches any non-whitespace character; equivalent to [^\s].
        \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
                 in bytes patterns or string patterns with the ASCII flag.
                 In string patterns without the ASCII flag, it will match the
                 range of Unicode alphanumeric characters (letters plus digits
                 plus underscore).
                 With LOCALE, it will match the set [0-9_] plus characters defined
                 as letters for the current locale.
        \W       Matches the complement of \w.
        \\       Matches a literal backslash.
    
    This module exports the following functions:
        match     Match a regular expression pattern to the beginning of a string.
        fullmatch Match a regular expression pattern to all of a string.
        search    Search a string for the presence of a pattern.
        sub       Substitute occurrences of a pattern found in a string.
        subn      Same as sub, but also return the number of substitutions made.
        split     Split a string by the occurrences of a pattern.
        findall   Find all occurrences of a pattern in a string.
        finditer  Return an iterator yielding a match object for each match.
        compile   Compile a pattern into a RegexObject.
        purge     Clear the regular expression cache.
        escape    Backslash all non-alphanumerics in a string.
    
    Some of the functions in this module takes flags as optional parameters:
        A  ASCII       For string patterns, make \w, \W, \b, \B, \d, \D
                       match the corresponding ASCII character categories
                       (rather than the whole Unicode categories, which is the
                       default).
                       For bytes patterns, this flag is the only available
                       behaviour and needn't be specified.
        I  IGNORECASE  Perform case-insensitive matching.
        L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
        M  MULTILINE   "^" matches the beginning of lines (after a newline)
                       as well as the string.
                       "$" matches the end of lines (before a newline) as well
                       as the end of the string.
        S  DOTALL      "." matches any character at all, including the newline.
        X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
        U  UNICODE     For compatibility only. Ignored for string patterns (it
                       is the default), and forbidden for bytes patterns.
    
    This module also defines an exception 'error'.

CLASSES
    builtins.Exception(builtins.BaseException)
        sre_constants.error
    
    class error(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      error
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, msg, pattern=None, pos=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      helper for pickle
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FUNCTIONS
    compile(pattern, flags=0)
        Compile a regular expression pattern, returning a pattern object.
    
    escape(pattern)
        Escape all the characters in pattern except ASCII letters, numbers and '_'.
    
    findall(pattern, string, flags=0)
        Return a list of all non-overlapping matches in the string.
        
        If one or more capturing groups are present in the pattern, return
        a list of groups; this will be a list of tuples if the pattern
        has more than one group.
        
        Empty matches are included in the result.
    
    finditer(pattern, string, flags=0)
        Return an iterator over all non-overlapping matches in the
        string.  For each match, the iterator returns a match object.
        
        Empty matches are included in the result.
    
    fullmatch(pattern, string, flags=0)
        Try to apply the pattern to all of the string, returning
        a match object, or None if no match was found.
    
    match(pattern, string, flags=0)
        Try to apply the pattern at the start of the string, returning
        a match object, or None if no match was found.
    
    purge()
        Clear the regular expression caches
    
    search(pattern, string, flags=0)
        Scan through string looking for a match to the pattern, returning
        a match object, or None if no match was found.
    
    split(pattern, string, maxsplit=0, flags=0)
        Split the source string by the occurrences of the pattern,
        returning a list containing the resulting substrings.  If
        capturing parentheses are used in pattern, then the text of all
        groups in the pattern are also returned as part of the resulting
        list.  If maxsplit is nonzero, at most maxsplit splits occur,
        and the remainder of the string is returned as the final element
        of the list.
    
    sub(pattern, repl, string, count=0, flags=0)
        Return the string obtained by replacing the leftmost
        non-overlapping occurrences of the pattern in string by the
        replacement repl.  repl can be either a string or a callable;
        if a string, backslash escapes in it are processed.  If it is
        a callable, it's passed the match object and must return
        a replacement string to be used.
    
    subn(pattern, repl, string, count=0, flags=0)
        Return a 2-tuple containing (new_string, number).
        new_string is the string obtained by replacing the leftmost
        non-overlapping occurrences of the pattern in the source
        string by the replacement repl.  number is the number of
        substitutions that were made. repl can be either a string or a
        callable; if a string, backslash escapes in it are processed.
        If it is a callable, it's passed the match object and must
        return a replacement string to be used.
    
    template(pattern, flags=0)
        Compile a template pattern, returning a pattern object

DATA
    A = <RegexFlag.ASCII: 256>
    ASCII = <RegexFlag.ASCII: 256>
    DOTALL = <RegexFlag.DOTALL: 16>
    I = <RegexFlag.IGNORECASE: 2>
    IGNORECASE = <RegexFlag.IGNORECASE: 2>
    L = <RegexFlag.LOCALE: 4>
    LOCALE = <RegexFlag.LOCALE: 4>
    M = <RegexFlag.MULTILINE: 8>
    MULTILINE = <RegexFlag.MULTILINE: 8>
    S = <RegexFlag.DOTALL: 16>
    U = <RegexFlag.UNICODE: 32>
    UNICODE = <RegexFlag.UNICODE: 32>
    VERBOSE = <RegexFlag.VERBOSE: 64>
    X = <RegexFlag.VERBOSE: 64>
    __all__ = ['match', 'fullmatch', 'search', 'sub', 'subn', 'split', 'fi...

VERSION
    2.2.1

FILE
    c:\users\uwe\appdata\local\programs\python\python36\lib\re.py


help> 

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> import re
>>> re.findall(r'\d{2,5}', 'abc 0 245 34 2 55674 7777777 xyz4u sd67fr90')
['245', '34', '55674', '77777', '77', '67', '90']
>>> print r
SyntaxError: Missing parentheses in call to 'print'
>>> print(r)
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    print(r)
NameError: name 'r' is not defined
>>> re.findall('\d{2,5}', 'abc 0 245 34 2 55674 7777777 xyz4u sd67fr90')
['245', '34', '55674', '77777', '77', '67', '90']
>>> ports = re.findall(r'\d{2,5}', 'abc 0 245 34 2 55674 7777777 xyz4u sd67fr90')
>>> print(ports)
['245', '34', '55674', '77777', '77', '67', '90']
>>> write
Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    write
NameError: name 'write' is not defined
>>> write
Traceback (most recent call last):
  File "<pyshell#11>", line 1, in <module>
    write
NameError: name 'write' is not defined
>>> help(write)
Traceback (most recent call last):
  File "<pyshell#12>", line 1, in <module>
    help(write)
NameError: name 'write' is not defined
>>> 
